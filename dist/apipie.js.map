{"version":3,"file":null,"sources":["../node_modules/path-to-regexp/node_modules/isarray/index.js","../node_modules/path-to-regexp/index.js","../lib/utils/args-parser.js","../node_modules/deepmerge/index.js","../lib/normalizeRecord.js","../lib/utils/compose.js","../lib/create-rest-tree.js","../lib/index.js"],"sourcesContent":["module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","import pathToRegexp from 'path-to-regexp'\n\nexport default function parseExecArgs (url, props, { _require }) {\n  const result = { url }\n  \n  // validate query\n  if (_require.query && (!props || !props.query)) {\n    throw new Error('Require query!')\n  }\n\n  // validate data\n  if (_require.data && (!props || !props.data)) {\n    throw new Error('Require data!')\n  }\n\n  //validate params\n  let requireParams = pathToRegexp.parse(url)\n    .filter(token =>\n        [\n          typeof token !== 'string',\n          !token.optional, // https://github.com/pillarjs/path-to-regexp#optional\n          !token.asterisk // https://github.com/pillarjs/path-to-regexp#asterisk\n        ].every(Boolean)\n    )\n    .map(({ name }) => name)\n\n  if (requireParams.length && !props) {\n    throw new Error('Require params!')\n  }\n\n  if (!props) {\n    return result\n  }\n\n  const { params, query, data } = props\n\n  if (params) {\n    requireParams.forEach(param => {\n      if (!params[param]) {\n        throw new Error(`Require ${requireParams.join(', ')}, but given ${Object.keys(params).join(', ') || 'nothing'}`)\n      }\n    })\n\n    const toPath = pathToRegexp.compile(url)\n    result.url = toPath(params)\n  }\n\n  // query == params for axios\n  if (query) {\n    result.params = query\n  }\n\n  if (data) {\n    result.data = data\n  }\n\n  return result\n}","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.deepmerge = factory();\n    }\n}(this, function () {\n\nfunction isMergeableObject(val) {\n    var nonNullObject = val && typeof val === 'object'\n\n    return nonNullObject\n        && Object.prototype.toString.call(val) !== '[object RegExp]'\n        && Object.prototype.toString.call(val) !== '[object Date]'\n}\n\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {}\n}\n\nfunction cloneIfNecessary(value, optionsArgument) {\n    var clone = optionsArgument && optionsArgument.clone === true\n    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value\n}\n\nfunction defaultArrayMerge(target, source, optionsArgument) {\n    var destination = target.slice()\n    source.forEach(function(e, i) {\n        if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument)\n        } else if (isMergeableObject(e)) {\n            destination[i] = deepmerge(target[i], e, optionsArgument)\n        } else if (target.indexOf(e) === -1) {\n            destination.push(cloneIfNecessary(e, optionsArgument))\n        }\n    })\n    return destination\n}\n\nfunction mergeObject(target, source, optionsArgument) {\n    var destination = {}\n    if (isMergeableObject(target)) {\n        Object.keys(target).forEach(function (key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument)\n        })\n    }\n    Object.keys(source).forEach(function (key) {\n        if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument)\n        } else {\n            destination[key] = deepmerge(target[key], source[key], optionsArgument)\n        }\n    })\n    return destination\n}\n\nfunction deepmerge(target, source, optionsArgument) {\n    var array = Array.isArray(source);\n    var options = optionsArgument || { arrayMerge: defaultArrayMerge }\n    var arrayMerge = options.arrayMerge || defaultArrayMerge\n\n    if (array) {\n        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)\n    } else {\n        return mergeObject(target, source, optionsArgument)\n    }\n}\n\ndeepmerge.all = function deepmergeAll(array, optionsArgument) {\n    if (!Array.isArray(array) || array.length < 2) {\n        throw new Error('first argument should be an array with at least two elements')\n    }\n\n    // we are sure there are at least 2 values, so it is safe to have no initial value\n    return array.reduce(function(prev, next) {\n        return deepmerge(prev, next, optionsArgument)\n    })\n}\n\nreturn deepmerge\n\n}));\n","import merge from 'deepmerge'\n\nexport default function normalizeRecord (record, { options = {}, meta = {}, hooks = [] }) {\n  if (record._normalized) return record\n  transformSugarSyntax(record)\n  stackUrl(options, record.options)\n\n  return {\n    _normalized: true,\n    _require: {\n      data: !!record.data,\n      query: !!record.query\n    },\n    name: record.name,\n    meta: merge(meta, record.meta || {}, { clone: true }),\n    options: merge(options, record.options || {}, { clone: true }),\n    hooks: [].concat(hooks, record.hook || []),\n    children: record.children || []\n  }\n}\n\nconst arrayOfMethods = ['get', 'delete', 'head', 'post', 'options', 'put', 'patch'];\n\nexport function transformSugarSyntax(record) {\n  // { name, url, method } --> { name, option: { url, method } }\n  if (record.options == null) record.options = {}\n  if (record.url) {\n    record.options.url = record.url\n  }\n  if (record.url && record.method && (record.children == null)) {\n    record.options.method = record.method\n  }\n\n  // { name, method: url } --> { name, option: { url, method } }\n  const httpMethod = arrayOfMethods.find(key => key in record);\n  \n  if (httpMethod && typeof record[httpMethod] === 'string') {\n    record.options.url = record[httpMethod];\n    record.options.method = httpMethod;\n  }\n}\n\nexport function stackUrl (parentOpts, options) {\n  // console.warn({parentOpts, options})\n  if (parentOpts.url == null && options.url == null) return null\n  const url = options.url\n  const parentUrl = parentOpts.url\n  if ((url != null) && url.startsWith('/')) return url\n  if (parentUrl == null && !url.startsWith('/')) {\n    throw new Error('Can not find root of path!')\n  }\n  if ((url == null || url === '') && parentUrl) return parentUrl\n  if (parentUrl.endsWith('/')) {\n    options.url = parentUrl + url\n  } else {\n    options.url = `${parentUrl}/${url}`\n  }\n}\n","export default function compose (hooks) {\n  if (!Array.isArray(hooks)) throw new TypeError('Hooks stack must be an array!')\n  hooks.forEach(fn => { if (typeof fn !== 'function') throw new TypeError('Hooks must be composed of functions!') })\n  // for (const fn of hooks) {\n  //   if (typeof fn !== 'function') throw new TypeError('Hooks must be composed of functions!')\n  // }\n  \n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch (i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = hooks[i]\n      if (i === hooks.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        return Promise.resolve(fn(context, function next () {\n          return dispatch(i + 1)\n        }))\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}","import parseExecArgs from './utils/args-parser'\nimport normalizeRecord from './normalizeRecord'\nimport compose from './utils/compose'\nimport merge from 'deepmerge'\n\nfunction setVal (obj, propNamesPath, val) {\n  propNamesPath.reduce((acc, propName, i) => {\n    if (i === propNamesPath.length - 1) return acc[propName] = val\n      return acc[propName]\n    }, obj)\n}\n\nfunction getVal (obj, propNamesPath) {\n  return propNamesPath.reduce((acc, propName) => acc[propName], obj)\n}\n\n/*\n* STEP 1: Create a skeleton tree with minimal intermediate computations\n*/\nexport function createTreeSkeleton (records, baseOptions) {\n  /*\n  * options: {\n  *   hooks,\n  *   meta,\n  *   options,\n  *   records,\n  *   axios\n  * }\n  */\n  const tree = {}\n  baseOptions.tree = tree\n  const closurePack = baseOptions\n  records.forEach((record, index) => addTreeBranch(tree, record, [index], closurePack))\n  return tree\n}\n\nexport function addTreeBranch (branch, record, indexPath, closurePack) {\n  branch[record.name] = {}\n  if (record.children && record.children.length) {\n    if (record.method) {\n      record.children.push({\n        name: record.method,\n        method: record.method,\n        url: record.url,\n        data: !!record.data,\n        query: !!record.query\n      })\n    }\n    record.children.forEach((childRecord, index) =>\n        addTreeBranch(branch[record.name], childRecord, indexPath.concat(index), closurePack))\n    return\n  }\n  // Create lazy calculation leaf\n  branch[record.name] = lazyCalcLeafNode(indexPath, closurePack)\n}\n\nexport function lazyCalcLeafNode (indexPath, closurePack) {\n  return (props) => {\n    const { tree, records, axios } = closurePack\n    let [propNamesPath, record] = calculateBranchNodes(records, indexPath, [], closurePack)\n    setVal(tree, propNamesPath, createExecFunc(record, propNamesPath, axios))\n    return getVal(tree, propNamesPath)(props)\n  }\n}\n/*\n* STEP 2: Сompute only the necessary nodes of the tree to execute the request\n*/\nexport function calculateBranchNodes (records, indexPath, propNamesPath, closurePack) {\n  const index = indexPath.shift()\n  records[index] = normalizeRecord(records[index], closurePack)\n  const record = records[index]\n  propNamesPath.push(record.name)\n  if (record.children.length) {\n    return calculateBranchNodes(record.children, indexPath, propNamesPath, record)\n  }\n  return [propNamesPath, record]\n}\n\nexport function createExecFunc (record, fullName, axios) {\n  function createContext(meta, options) {\n    return {\n      meta,\n      options,\n      response: null,\n      name: record.name,\n      fullName\n    }\n  }\n  function createRequestFunc () {\n    return (ctx, next) => axios(ctx.options)\n      .then(response => {\n        ctx.response = response\n        next()\n      })\n  }\n  if (record.options instanceof Array) {\n    record.options = merge.all(record.options)\n  }\n  if (record.meta instanceof Array) {\n    record.meta = merge.all(record.meta)\n  }\n  record.hooks.push(createRequestFunc())\n  const fn = compose(record.hooks)\n\n  return function (props) {\n    const tmpOptions = merge(record.options, parseExecArgs(record.options.url, props, record), { clone: true })\n    const context = createContext(record.meta, tmpOptions)\n    return fn(context).then(() => context)\n  }\n}\n","import { createTreeSkeleton } from './create-rest-tree'\n\nexport default class Apipie {\n  constructor(records, options) {\n    this.records = records\n    this.hooks = []\n    this.meta = {}\n    this.options = {}\n    this.axios = options.axios\n  }\n  globalHook(hook) {\n    this.hooks.push(hook)\n  }\n  create () {\n    return createTreeSkeleton(this.records, this)\n  }\n}\n"],"names":["isarray","parseExecArgs","url","props","_require","result","query","Error","data","requireParams","pathToRegexp","parse","filter","token","optional","asterisk","every","Boolean","map","name","length","params","forEach","param","join","Object","keys","toPath","compile","define","this","normalizeRecord","record","options","meta","hooks","_normalized","merge","clone","concat","hook","children","arrayOfMethods","transformSugarSyntax","method","httpMethod","find","key","stackUrl","parentOpts","parentUrl","startsWith","endsWith","compose","Array","isArray","TypeError","fn","context","next","index","dispatch","i","Promise","reject","resolve","err","setVal","obj","propNamesPath","val","reduce","acc","propName","getVal","createTreeSkeleton","records","baseOptions","tree","closurePack","addTreeBranch","branch","indexPath","push","childRecord","lazyCalcLeafNode","axios","calculateBranchNodes","createExecFunc","shift","fullName","createContext","createRequestFunc","ctx","then","response","all","tmpOptions","Apipie"],"mappings":"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"}